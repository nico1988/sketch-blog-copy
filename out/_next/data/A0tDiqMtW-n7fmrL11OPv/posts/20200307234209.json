{"pageProps":{"post":{"fileName":"2020-03-07_ES6中的模块.md","id":"2020-03-07_ES6中的模块","permalink":"20200307234209","tags":["js"],"title":"ES6中的模块","date":"2020-03-07T23:42:09+08:00","categories":["笔记"],"cover":"https://cloud.miiiku.xyz/src/images/cover/cover-01.jpg","contentHtml":"<p>最近在做项目的时候发现在一个模块导出的时候是返回一个NEW以后实例化的对象，在其他地方使用的是同一个对象(一直以为是不用的对象，每次导入都是一个新的。。。还是太菜)。</p>\n<p>在网上了解了ES6模块的一个基本机制，所以记录一下笔记。</p>\n<h4>ES6中模块不会重复执行</h4>\n<p><em><strong>一个模块无论被多少个地方引用，引用多少次，模块内部始终只执行一次。</strong></em></p>\n<h4>ES6中模块输出值的引用</h4>\n<p>在ES6中，导出输出的值会动态关联模块中的值:</p>\n<pre class=\"hljs language-js\"><code class=\"language-js\"><span class=\"hljs-comment\">// count.js</span>\n<span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">let</span> add = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n  count ++\n}\n<span class=\"hljs-keyword\">export</span> { count, add }\n\n<span class=\"hljs-comment\">// a.js</span>\n<span class=\"hljs-keyword\">import</span> { count, add } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./count.js&quot;</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(count) <span class=\"hljs-comment\">// 0</span>\n<span class=\"hljs-title function_\">add</span>()\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(count) <span class=\"hljs-comment\">// 1</span>\n\n<span class=\"hljs-comment\">// b.js</span>\n<span class=\"hljs-keyword\">import</span> { count } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./count.js&quot;</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(count) <span class=\"hljs-comment\">// 1</span>\n</code></pre>\n<p>count的值是会动态变化的。</p>\n<h4>ES6模块循环依赖</h4>\n<p><em><strong>import 会优先执行，跟位置无关</strong></em></p>\n<pre class=\"hljs language-js\"><code class=\"language-js\"><span class=\"hljs-comment\">// a.js</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;a.js&quot;</span>)\n<span class=\"hljs-keyword\">import</span> { b } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./b&quot;</span>\n\n<span class=\"hljs-comment\">// b.js</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> b = <span class=\"hljs-string\">&quot;B&quot;</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;b.js被执行&quot;</span>)\n\n<span class=\"hljs-comment\">// 结果</span>\n<span class=\"hljs-comment\">// b.js被执行</span>\n<span class=\"hljs-comment\">// a.js</span>\n</code></pre>\n<p>import被JS引擎静态分析，会被提到模块的最前面，优先于模块中的其他部分的执行。</p>\n<pre class=\"hljs language-js\"><code class=\"language-js\"><span class=\"hljs-comment\">// a.js</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Start A:`</span>)\n\n<span class=\"hljs-keyword\">import</span> { b } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./b&quot;</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> a = <span class=\"hljs-string\">&quot;AAA&quot;</span>\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`A正在获取数据b: <span class=\"hljs-subst\">${b}</span>`</span>)\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`End A:`</span>)\n\n<span class=\"hljs-comment\">// b.js</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Start B:`</span>)\n\n<span class=\"hljs-keyword\">import</span> { a } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./a&quot;</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> b = <span class=\"hljs-string\">&quot;BBB&quot;</span>\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`B正在获取数据a: <span class=\"hljs-subst\">${a}</span>`</span>)\n\n<span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;end..&quot;</span>)\n})\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`End B:`</span>)\n\n<span class=\"hljs-comment\">// 执行a.js</span>\n<span class=\"hljs-comment\">// 结果：</span>\n\n<span class=\"hljs-comment\">// Start B:</span>\n<span class=\"hljs-comment\">// B正在获取数据a: undefined</span>\n<span class=\"hljs-comment\">// End B:</span>\n<span class=\"hljs-comment\">// Start A:</span>\n<span class=\"hljs-comment\">// A正在获取数据b: BBB</span>\n<span class=\"hljs-comment\">// End A:</span>\n<span class=\"hljs-comment\">// end..</span>\n\n<span class=\"hljs-comment\">// main.js</span>\n<span class=\"hljs-keyword\">import</span> { a } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./a&quot;</span>\n<span class=\"hljs-keyword\">import</span> { b } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./b&quot;</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a)\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(b)\n\n<span class=\"hljs-comment\">// 执行a.js</span>\n<span class=\"hljs-comment\">// 结果：</span>\n\n<span class=\"hljs-comment\">// Start B:</span>\n<span class=\"hljs-comment\">// B正在获取数据a: undefined</span>\n<span class=\"hljs-comment\">// End B:</span>\n<span class=\"hljs-comment\">// Start A:</span>\n<span class=\"hljs-comment\">// A正在获取数据b: BBB</span>\n<span class=\"hljs-comment\">// End A:</span>\n<span class=\"hljs-comment\">// end..</span>\n<span class=\"hljs-comment\">// AAA</span>\n<span class=\"hljs-comment\">// BBB</span>\n</code></pre>\n<p>(CommonJS)首先a.js加载b.js，此时a.js代码暂停在这里，执行加载b.js，在b.js中又加载a.js，但是a.js并没有加载完，所以获取到undefined，然后继续执行完以后，回到a.js正常执行。</p>\n<p>(ES6) 首先a.js加载b.js，所以先执行b.js，而b.js又去加载a.js，这时候由于a.js已经开始执行了，所以不会重复执行，而是继续执行b.js，又a.js还未执行完，所以b.js获取到值是undefined，然后继续执行完以后，回到a.js正常执行。</p>\n<blockquote>\n<p>CommonJS 和 ES6 的这个加载描述是在网上查阅的，还不是很懂，感觉两种方式的行为都是一样的啊= =!!</p>\n</blockquote>\n<blockquote>\n<p>感觉CommonJS的加载方式套用在ES6，ES6的加载方式套用在CommonJS都能说的通。。CommonJS模块不也是只会加载一次嘛，套用在ES6感觉都没毛病。。。</p>\n</blockquote>\n<p>在main.js中执行，得出并不会再去执行第二行代码b.js，原因是在执行a.js时b.js已经被加载，<strong>模块不会被重复加载</strong>。</p>\n<h4>一个关于动态引用的例子:</h4>\n<pre class=\"hljs language-js\"><code class=\"language-js\"><span class=\"hljs-comment\">// a.js</span>\n<span class=\"hljs-keyword\">import</span> {bar} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./b.js&#x27;</span>;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;foo&#x27;</span>);\n  <span class=\"hljs-title function_\">bar</span>();\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;执行完毕&#x27;</span>);\n}\n<span class=\"hljs-title function_\">foo</span>();\n \n<span class=\"hljs-comment\">// b.js</span>\n<span class=\"hljs-keyword\">import</span> {foo} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./a.js&#x27;</span>;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">bar</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;bar&#x27;</span>);\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">random</span>() &gt; <span class=\"hljs-number\">0.5</span>) {\n    <span class=\"hljs-title function_\">foo</span>();\n  }\n}\n</code></pre>\n<p>按照CommonJS规范，上面的代码是无法执行的。a先加载b，然后b又加载a，这时a还没有任何执行结果，所以输出结果为null，即对于b.js来说，变量foo的值等于null，后面的foo()就会报错。</p>\n<p>但是，ES6可以执行上面的代码，a.js之所以能够执行，原因就在于ES6加载的变量都是动态引用其所在模块的。只要引用存在，代码就能执行。</p>\n<p>会到问题到最开始，在导出时返回new对象到操作，只有在第一次加载的时候，会执行模块中的代码，返回一个实例化以后的对象，以后的每次导入，都是第一次的结果，并不会重新在去执行一次模块的代码。</p>\n<pre class=\"hljs language-js\"><code class=\"language-js\"><span class=\"hljs-comment\">// obj.js</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestObj</span> {\n  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = <span class=\"hljs-string\">&quot;&quot;</span>;\n\n  setName = <span class=\"hljs-function\">(<span class=\"hljs-params\">name</span>) =&gt;</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name;\n  }\n\n  print = <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>);\n  }\n}\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TestObj</span>();\n\n<span class=\"hljs-comment\">// a.js</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">TestObj</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./TestObj&quot;</span>\n<span class=\"hljs-title class_\">TestObj</span>.<span class=\"hljs-title function_\">setName</span>(<span class=\"hljs-string\">&quot;Sukoshi&quot;</span>)\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title class_\">TestObj</span>.<span class=\"hljs-title function_\">print</span>()) <span class=\"hljs-comment\">// Sukoshi</span>\n\n<span class=\"hljs-comment\">// b.js</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">TestObj</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./TestObj&quot;</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title class_\">TestObj</span>.<span class=\"hljs-title function_\">print</span>()) <span class=\"hljs-comment\">// Sukoshi</span>\n</code></pre>\n"}},"__N_SSG":true}