{"pageProps":{"post":{"fileName":"2019-05-22_使用Azure-DevOps创建CI-CD实现自动构建发布.md","id":"2019-05-22_使用Azure-DevOps创建CI-CD实现自动构建发布","permalink":"20190523015703","tags":["DevOps"],"title":"使用Azure DevOps创建CI/CD实现自动构建发布","date":"2019-05-23T01:57:03+08:00","subtitle":null,"categories":["笔记"],"cover":"https://qiniu.sukoshi.xyz/attach/2019/05/WX20190522-184111@2x0.png","contentHtml":"<p>目前博客项目代码是放在GitHub上的，每次发布了新了文章会往GitHub上推送一次，还会往托管博客的服务器推送一次，很繁琐</p>\n<p>偶然看到可以使用微软的Azure DevOps来创建CI/CD自动构建部署到服务器，这样以来每次在本地发布新的文章，直接push到GitHub就可以摸鱼，等待几分钟后线上博客已经自动更新，美滋滋。</p>\n<p>第一次使用Azure Devops，磕磕碰碰的测试了很久，文档目前还没有中文的，全靠谷歌翻译，有些地方自己也不是太明白，但好歹现在感觉弄好了😂</p>\n<p>关于CI/CD的文章网上一大堆，专业术语也很多，看的费神就不做多说了😂😂😂</p>\n<p><img src=\"https://qiniu.sukoshi.xyz/attach/2019/05/WX20190522-184111@2x0.png\" alt=\"https://qiniu.sukoshi.xyz/attach/2019/05/WX20190522-184111@2x0.png\" loading=\"lazy\"></p>\n<p>关于Azure DevOps相关文档可以查看<a href=\"https://docs.microsoft.com/en-us/azure/devops/pipelines/?view=azure-devops\" target=\"_blank\" rel=\"noopener\">https://docs.microsoft.com/en-us/azure/devops/pipelines/?view=azure-devops</a></p>\n<p><strong>创建CI</strong></p>\n<p><img src=\"https://qiniu.sukoshi.xyz/attach/2019/05/WX20190522-182619@2x1.png\" alt=\"https://qiniu.sukoshi.xyz/attach/2019/05/WX20190522-182619@2x1.png\" loading=\"lazy\"></p>\n<p>在<em>Pipelines</em>中新建一个<em>Builds</em>管道任务</p>\n<p>我的配置如下</p>\n<pre class=\"hljs language-yml\"><code class=\"language-yml\"><span class=\"hljs-comment\"># Starter pipeline</span>\n<span class=\"hljs-comment\"># Start with a minimal pipeline that you can customize to build and deploy your code.</span>\n<span class=\"hljs-comment\"># Add steps that build, run tests, deploy, and more:</span>\n<span class=\"hljs-comment\"># https://aka.ms/yaml</span>\n\n<span class=\"hljs-attr\">trigger:</span>\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">master</span>\n\n<span class=\"hljs-attr\">pool:</span>\n  <span class=\"hljs-attr\">vmImage:</span> <span class=\"hljs-string\">&#x27;Ubuntu-latest&#x27;</span>\n\n<span class=\"hljs-attr\">steps:</span>\n\n<span class=\"hljs-comment\"># 使用nodejs</span>\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">task:</span> <span class=\"hljs-string\">UseNode@1</span>\n  <span class=\"hljs-attr\">inputs:</span>\n    <span class=\"hljs-attr\">checkLatest:</span> <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-attr\">displayName:</span> <span class=\"hljs-string\">&#x27;Install Node.js&#x27;</span>\n\n<span class=\"hljs-comment\"># 安装npm包</span>\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">task:</span> <span class=\"hljs-string\">Npm@1</span>\n  <span class=\"hljs-attr\">inputs:</span>\n    <span class=\"hljs-attr\">command:</span> <span class=\"hljs-string\">&#x27;install&#x27;</span>\n  <span class=\"hljs-attr\">displayName:</span> <span class=\"hljs-string\">&#x27;npm install&#x27;</span>\n\n<span class=\"hljs-comment\"># 全局安装hexo</span>\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">task:</span> <span class=\"hljs-string\">Npm@1</span>\n  <span class=\"hljs-attr\">inputs:</span>\n    <span class=\"hljs-attr\">command:</span> <span class=\"hljs-string\">&#x27;custom&#x27;</span>\n    <span class=\"hljs-attr\">customCommand:</span> <span class=\"hljs-string\">&#x27;install hexo -g&#x27;</span>\n  <span class=\"hljs-attr\">displayName:</span> <span class=\"hljs-string\">&#x27;npm install hexo -g&#x27;</span>\n\n<span class=\"hljs-comment\"># 生成博客静态文件</span>\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">task:</span> <span class=\"hljs-string\">Bash@3</span>\n  <span class=\"hljs-attr\">inputs:</span>\n    <span class=\"hljs-attr\">targetType:</span> <span class=\"hljs-string\">&#x27;inline&#x27;</span>\n    <span class=\"hljs-attr\">script:</span> <span class=\"hljs-string\">&#x27;hexo g&#x27;</span>\n  <span class=\"hljs-attr\">displayName:</span> <span class=\"hljs-string\">&#x27;hexo g&#x27;</span>\n\n<span class=\"hljs-comment\"># - task: ArchiveFiles@2</span>\n<span class=\"hljs-comment\">#   inputs:</span>\n<span class=\"hljs-comment\">#     rootFolderOrFile: &#x27;$(Build.BinariesDirectory)&#x27;</span>\n<span class=\"hljs-comment\">#     includeRootFolder: true</span>\n<span class=\"hljs-comment\">#     archiveType: &#x27;zip&#x27;</span>\n<span class=\"hljs-comment\">#     archiveFile: &#x27;$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip&#x27;</span>\n<span class=\"hljs-comment\">#     replaceExistingArchive: true</span>\n<span class=\"hljs-comment\">#     verbose: true</span>\n<span class=\"hljs-comment\">#   displayName: &#x27;zip file&#x27;</span>\n\n<span class=\"hljs-comment\"># 对生产的静态文件打包</span>\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">task:</span> <span class=\"hljs-string\">ArchiveFiles@2</span>\n  <span class=\"hljs-attr\">inputs:</span>\n    <span class=\"hljs-attr\">rootFolderOrFile:</span> <span class=\"hljs-string\">&#x27;$(System.DefaultWorkingDirectory)/public&#x27;</span>\n    <span class=\"hljs-attr\">includeRootFolder:</span> <span class=\"hljs-literal\">false</span>\n    <span class=\"hljs-attr\">archiveType:</span> <span class=\"hljs-string\">&#x27;zip&#x27;</span>\n    <span class=\"hljs-attr\">archiveFile:</span> <span class=\"hljs-string\">&#x27;$(Build.ArtifactStagingDirectory)/file.zip&#x27;</span>\n    <span class=\"hljs-attr\">replaceExistingArchive:</span> <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-attr\">displayName:</span> <span class=\"hljs-string\">&#x27;zip file&#x27;</span>\n\n<span class=\"hljs-comment\"># 吧打包的文件上传到临时代理容器中</span>\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">task:</span> <span class=\"hljs-string\">PublishBuildArtifacts@1</span>\n  <span class=\"hljs-attr\">inputs:</span>\n    <span class=\"hljs-attr\">PathtoPublish:</span> <span class=\"hljs-string\">&#x27;$(Build.ArtifactStagingDirectory)/file.zip&#x27;</span>\n    <span class=\"hljs-attr\">ArtifactName:</span> <span class=\"hljs-string\">&#x27;blog&#x27;</span>\n    <span class=\"hljs-attr\">publishLocation:</span> <span class=\"hljs-string\">&#x27;Container&#x27;</span>\n\n<span class=\"hljs-comment\"># 一个成功到提示，没什么用</span>\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">script:</span> <span class=\"hljs-string\">echo</span> <span class=\"hljs-string\">success</span>\n  <span class=\"hljs-attr\">displayName:</span> <span class=\"hljs-string\">&#x27;end...&#x27;</span>\n\n</code></pre>\n<p><strong>创建CD</strong></p>\n<p><img src=\"https://qiniu.sukoshi.xyz/attach/2019/05/WX20190522-184346@2x2.png\" alt=\"https://qiniu.sukoshi.xyz/attach/2019/05/WX20190522-184346@2x2.png\" loading=\"lazy\"></p>\n<p>这里需要设置触发方式，每次新构建成功后自动触发CD部署代码</p>\n<p><img src=\"https://qiniu.sukoshi.xyz/attach/2019/05/WX20190522-184537@2x3.png\" alt=\"https://qiniu.sukoshi.xyz/attach/2019/05/WX20190522-184537@2x3.png\" loading=\"lazy\"></p>\n<p>在CD中，我创建了两个任务，第一个是吧CI中打包的文件上传到自己的服务器，第二个则是吧已经上传的压缩包解压出来并删除压缩包，这样就实现了线上博客的更新。</p>\n<p><img src=\"https://qiniu.sukoshi.xyz/attach/2019/05/WX20190522-185448@2x4.png\" alt=\"https://qiniu.sukoshi.xyz/attach/2019/05/WX20190522-185448@2x4.png\" loading=\"lazy\"></p>\n<p><img src=\"https://qiniu.sukoshi.xyz/attach/2019/05/WX20190522-185620@2x5.png\" alt=\"https://qiniu.sukoshi.xyz/attach/2019/05/WX20190522-185620@2x5.png\" loading=\"lazy\"></p>\n<p>整个大概流程就是这样了，写的并不清楚，一些地方没有说到，主要是嫌弃麻烦😂，嘛，反正只是一次记录，不要在意太多细节。。。。</p>\n"}},"__N_SSG":true}